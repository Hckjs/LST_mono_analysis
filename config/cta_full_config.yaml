# seed for the random number generators, to make things reproducible
seed: 0

# define the number of cross validations to perform
n_cross_validations: 5

# Set the data format. This also sets the targets, pointing, etc to the according cta dl1 columns
# and makes sure the obs_id, event_id and tel_id are loaded into the dataframe
data_format: CTA
datamodel_version: 1.1.0
keep_images: False

telescopes:
    - tel_001

# Dummy cuts to ensure this is working
selection:
    hillas_intensity:
      - '>='  # needs to be in quotes because > and ! are special character in yaml
      - 300
    leakage_intensity_width_1:
      - <
      - 0.2
    leakage_intensity_width_2:
      - <
      - 0.2

# config for the source regression
disp:
  disp_regressor: |
    ensemble.RandomForestRegressor(
        n_estimators=200,
        max_features='auto',
        n_jobs=-1,
        max_depth=20,
    )

  sign_classifier: |
    ensemble.RandomForestClassifier(
        n_estimators=200,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
    )

  # Define the name of the variable you want estimate by regression.
  # This the name of the group containing the predictions in the CTA case
  # Prediction columns are named source_x_prediction, source_y_prediction
  output_name: disp_prediction

  # randomly sample the data if you dont want to use the whole set
  n_signal : 200000
  features:
    - hillas_length
    - hillas_width
    - hillas_r
    - hillas_skewness
    - hillas_kurtosis
    - hillas_intensity
    - timing_slope
    - timing_intercept
    - timing_deviation

  feature_generation:
    needed_columns:
      - hillas_width
      - hillas_length
      - hillas_intensity
    features:
      elongation: hillas_width / hillas_length
      area: hillas_width * hillas_length * @pi
      log_intensity: log(hillas_intensity)
      log_intensity_area: log(hillas_intensity) / (hillas_width * hillas_length * @pi)

energy:
  regressor: |
    ensemble.RandomForestRegressor(
      n_estimators=200,
      max_features='sqrt',
      n_jobs=-1,
      max_depth=20,
    )

  # randomly sample the data if you dont want to use the whole set
  n_signal: 200000


  # Define the name of the variable you want estimate by regression.
  # This the name of the group containing the predictions aswell as the column name in the CTA case
  output_name: gamma_energy_prediction

  features:
    - hillas_intensity
    - hillas_length
    - hillas_length_uncertainty
    - hillas_width
    - concentration_core
    - concentration_cog
    - hillas_skewness
    - leakage_intensity_width_1
    - leakage_intensity_width_2
    - intensity_max
    - intensity_mean
    - intensity_std

  feature_generation:
    needed_columns:
      - hillas_width
      - hillas_length
      - hillas_intensity
    features:
      area: hillas_width * hillas_length * @pi
      intensity_area: hillas_intensity / (hillas_width * hillas_length * @pi)
      log_intensity: log(hillas_intensity)

 
# config for the g/h separation
separator:
  #the classifier to use
  classifier: |
    ensemble.RandomForestClassifier(
        n_estimators=200,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
        criterion='entropy',
    )

  # randomly sample the data if you dont want to use the whole set
  n_background: 200000
  n_signal: 200000

  # Define the name of the variable you want estimate by regression.
  # This the name of the group containing the predictions aswell as the column name in the CTA case
  output_name: gamma_prediction

  features:
    - hillas_intensity
    - hillas_length
    - hillas_width
    - hillas_width_uncertainty
    - hillas_kurtosis
    - hillas_skewness
    - timing_deviation
    - timing_slope
    - timing_intercept
    - concentration_cog
    - concentration_core
    - morphology_num_pixels
    - intensity_std

  feature_generation:
    needed_columns:
      - hillas_width
      - hillas_length
      - hillas_intensity
    features:
      area: hillas_width * hillas_length * @pi
      intensity_area: hillas_intensity / (hillas_width * hillas_length * @pi)
      area_intensity_cut_var: (hillas_width * hillas_length * @pi) / log(hillas_intensity)**2
      log_intensity: log(hillas_intensity)

